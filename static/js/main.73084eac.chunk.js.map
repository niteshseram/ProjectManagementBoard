{"version":3,"sources":["components/Ticket/Ticket.js","components/Lane/Lane.js","withDataFetching.js","containers/Board.js","components/Header/Header.js","containers/App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["TicketWrapper","styled","div","Title","h3","Body","p","Ticket","marginRight","onDragStart","ticket","draggable","e","id","title","body","LaneWrapper","h2","TicketsWrapper","Alert","Lane","laneId","tickets","loading","error","onDragOver","onDrop","map","withDataFetching","WrappedComponent","WithDataFetching","props","useState","data","setData","setLoading","setError","useEffect","a","fetch","dataSource","json","ticketsJSON","message","fetchData","displayName","name","BoardWrapper","lanes","setTickets","ev","dataTransfer","preventDefault","getData","updatedTickets","filter","parseInt","lane","HeaderWrapper","h1","Header","GlobalStyle","createGlobalStyle","AppWrapper","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.73084eac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TicketWrapper = styled.div`\r\n  background: darkGray;\r\n  padding: 20px;\r\n  border-radius: 20px;\r\n  &:not(:last-child) {\r\n    margin-bottom: 5%;\r\n  }\r\n`;\r\nconst Title = styled.h3`\r\n  width: 100%;\r\n  margin: 0px;\r\n`;\r\nconst Body = styled.p`\r\n  width: 100%;\r\n`;\r\nconst Ticket = ({ marginRight, onDragStart, ticket }) => (\r\n  <TicketWrapper\r\n    draggable\r\n    onDragStart={(e) => onDragStart && onDragStart(e, ticket.id)}\r\n    marginRight={marginRight}\r\n  >\r\n    <Title>{ticket.title}</Title>\r\n    <Body>{ticket.body}</Body>\r\n  </TicketWrapper>\r\n);\r\nexport default Ticket;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Ticket from \"../Ticket/Ticket\";\r\n\r\nconst LaneWrapper = styled.div`\r\n  list-style: none;\r\n  text-align: left;\r\n  padding: 0;\r\n  background: lightGray;\r\n  border-radius: 20px;\r\n  min-height: 50vh;\r\n  width: 20vw;\r\n  @media (max-width: 768px) {\r\n    margin-bottom: 5%;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  width: 100%;\r\n  padding-bottom: 10px;\r\n  text-align: center;\r\n  border-bottom: 1px solid darkGray;\r\n`;\r\n\r\nconst TicketsWrapper = styled.div`\r\n  padding: 5%;\r\n`;\r\nconst Alert = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst Lane = ({\r\n  laneId,\r\n  tickets,\r\n  loading,\r\n  error,\r\n  onDragStart,\r\n  onDragOver,\r\n  onDrop,\r\n  title,\r\n}) => (\r\n  <LaneWrapper onDragOver={onDragOver} onDrop={(e) => onDrop(e, laneId)}>\r\n    <Title>{title}</Title>\r\n    {(loading || error) && <Alert>{loading ? \"Loading...\" : error}</Alert>}\r\n    <TicketsWrapper>\r\n      {tickets.map((ticket) => (\r\n        <Ticket key={ticket.id} onDragStart={onDragStart} ticket={ticket} />\r\n      ))}\r\n    </TicketsWrapper>\r\n  </LaneWrapper>\r\n);\r\n\r\nexport default Lane;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst withDataFetching = (WrappedComponent) => {\r\n  const WithDataFetching = (props) => {\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        try {\r\n          const tickets = await fetch(props.dataSource);\r\n          const ticketsJSON = await tickets.json();\r\n          setData(ticketsJSON);\r\n          setLoading(false);\r\n        } catch (err) {\r\n          setLoading(false);\r\n          setError(err.message);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    }, [props.dataSource]);\r\n\r\n    return (\r\n      <WrappedComponent\r\n        data={data}\r\n        loading={loading}\r\n        error={error}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n\r\n  WithDataFetching.displayName = `WithDataFetching(${WrappedComponent.name})`;\r\n  return WithDataFetching;\r\n};\r\n\r\nexport default withDataFetching;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Lane from \"../components/Lane/Lane\";\r\nimport withDataFetching from \"./../withDataFetching\";\r\n\r\nconst BoardWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n  margin: 5%;\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Board = ({ lanes, loading, error, data }) => {\r\n  const [tickets, setTickets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setTickets(data);\r\n  }, [data]);\r\n\r\n  const onDragStart = (ev, id) => {\r\n    ev.dataTransfer.setData(\"id\", id);\r\n  };\r\n\r\n  const onDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const onDrop = (e, laneId) => {\r\n    const id = e.dataTransfer.getData(\"id\");\r\n    const updatedTickets = tickets.filter((ticket) => {\r\n      if (ticket.id === parseInt(id)) {\r\n        ticket.lane = laneId;\r\n      }\r\n      return ticket;\r\n    });\r\n    setTickets(updatedTickets);\r\n  };\r\n\r\n  return (\r\n    <BoardWrapper>\r\n      {lanes.map((lane) => (\r\n        <Lane\r\n          key={lane.id}\r\n          laneId={lane.id}\r\n          title={lane.title}\r\n          loading={loading}\r\n          error={error}\r\n          onDragStart={onDragStart}\r\n          onDragOver={onDragOver}\r\n          onDrop={onDrop}\r\n          tickets={tickets.filter((ticket) => ticket.lane === lane.id)}\r\n        />\r\n      ))}\r\n    </BoardWrapper>\r\n  );\r\n};\r\n\r\nexport default withDataFetching(Board);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderWrapper = styled.div`\r\n  background-color: blue;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  height: 64px;\r\n  pointer-events: none;\r\n`;\r\n\r\nconst Header = () => (\r\n  <HeaderWrapper>\r\n    <Title>Project Management Board</Title>\r\n  </HeaderWrapper>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport Board from \"./Board\";\nimport Header from \"../components/Header/Header\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nconst AppWrapper = styled.div`\n  text-align: center;\n`;\n\nconst App = () => {\n  const lanes = [\n    { id: 1, title: \"To Do\" },\n    { id: 2, title: \"In Progress\" },\n    { id: 3, title: \"Review\" },\n    { id: 4, title: \"Done\" },\n  ];\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppWrapper>\n        <Header />\n        <Board\n          lanes={lanes}\n          dataSource={\"../../ProjectManagementBoard/assets/data.json\"}\n        />\n      </AppWrapper>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport \"./index.css\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}